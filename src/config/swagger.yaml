openapi: 3.0.0
info:
  title: Cricket Team Builder API
  version: 1.0.0
  description: A simplified RESTful API for a fantasy cricket team builder.
servers:
  - url: http://localhost:3000
    description: Local development server
tags:
  - name: Authentication
    description: User registration and login
  - name: Teams
    description: Fantasy team management
  - name: Players
    description: Player data management
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Player:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: MS Dhoni
        role:
          type: string
          example: Wicket-Keeper
        cost:
          type: integer
          example: 15
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: My Awesome Team
        userId:
          type: integer
          format: int64
          example: 1
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid credentials
security:
  - bearerAuth: []
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: newuser@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: Log in a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /teams:
    post:
      summary: Create a new fantasy team
      tags:
        - Teams
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - players
              properties:
                name:
                  type: string
                  example: My Dream Team
                players:
                  type: array
                  items:
                    type: integer
                  minItems: 11
                  maxItems: 11
                  example: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Team created successfully
                  team:
                    $ref: '#/components/schemas/Team'
        '400':
          description: Bad Request (e.g., validation errors)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all teams for the authenticated user
      tags:
        - Teams
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user's teams
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      $ref: '#/components/schemas/Team'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /teams/{id}:
    get:
      summary: Get details of a specific team
      tags:
        - Teams
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the team to retrieve
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                type: object
                properties:
                  team:
                    $ref: '#/components/schemas/Team'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing fantasy team
      tags:
        - Teams
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the team to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - players
              properties:
                name:
                  type: string
                  example: My Updated Team
                players:
                  type: array
                  items:
                    type: integer
                  minItems: 11
                  maxItems: 11
                  example: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
      responses:
        '200':
          description: Team updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Team updated successfully
                  team:
                    $ref: '#/components/schemas/Team'
        '400':
          description: Bad Request (e.g., validation errors)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /players:
    post:
      summary: Create a new player
      tags:
        - Players
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - role
                - cost
              properties:
                name:
                  type: string
                  example: New Player
                role:
                  type: string
                  example: Batsman
                cost:
                  type: integer
                  example: 10
      responses:
        '201':
          description: Player created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Player created successfully
                  player:
                    $ref: '#/components/schemas/Player'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all players
      tags:
        - Players
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all players
          content:
            application/json:
              schema:
                type: object
                properties:
                  players:
                    type: array
                    items:
                      $ref: '#/components/schemas/Player'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
